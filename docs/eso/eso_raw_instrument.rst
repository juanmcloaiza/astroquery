
********************************************************
Query the ESO Archive for Raw Data (Instrument-Specific)
********************************************************

The ESO Science Archive provides raw, unprocessed observational files and metadata directly from its suite of instruments. You can search either **instrument-specifically** using :meth:`~astroquery.eso.EsoClass.query_instrument`, which exposes instrument-unique columns and lets you apply hardware-tailored filters, or via the **global raw table** with :meth:`~astroquery.eso.EsoClass.query_main`, which offers a consistent set of columns across all instruments (omitting any instrument-specific fields). This flexibility allows you to perform highly specialized queries when you know exactly which instrument you need, or broad, cross-instrument searches when you want to compare data from multiple instruments. 

Identifying Available Instrument-Specific Queries
-------------------------------------------------

To begin retrieving raw data from the ESO Science Archive, you first need to identify the relevant instrument(s) for your search. Each instrument has its own dedicated query table accessible through the archive’s programmatic `TAP <https://archive.eso.org/programmatic/#TAP>`_ interface.

The list of all supported instruments can be retrieved using the :meth:`~astroquery.eso.EsoClass.list_instruments` method:

.. doctest-remote-data::

    >>> from astroquery.eso import Eso
    >>> eso = Eso()
    >>> eso.list_instruments()
    ['alpaca', 'amber', 'apex', 'crires', 'efosc', 'eris',
    'espresso', 'fiat', 'fors1', 'fors2', 'giraffe', 'gravity',
    'harps', 'hawki', 'isaac', 'kmos', 'matisse', 'midi',
    'muse', 'naco', 'nirps', 'omegacam', 'pionier', 'sinfoni',
    'sofi', 'sphere', 'uves', 'vimos', 'vircam', 'visir',
    'wlgsu', 'xshooter']

This list corresponds to the instruments currently available for programmatic raw data queries in the ESO archive.

**Note:** The list is dynamically generated by querying the archive’s internal TAP service. It can also be reproduced directly by executing the following ADQL query on the `ESO TAP interface <https://archive.eso.org/programmatic/#TAP>`_:

.. doctest-skip::

      SELECT table_name 
      FROM TAP_SCHEMA.tables 
      WHERE schema_name = 'ist' 
      ORDER BY table_name

Once you have identified the instrument of interest, you can proceed with constructing your query and retrieving raw data products.

Inspecting available query options
----------------------------------

Once an instrument is selected—for example, ``midi``—you can inspect the available queryable columns using the ``help=True`` keyword in the :meth:`~astroquery.eso.EsoClass.query_instrument` method. This is a useful first step to understand what metadata is available and how to structure your query.

The output includes column names, data types, units, and, where applicable, ``xtype`` information to indicate more specific column content. For example, a column with datatype ``char`` may represent a timestamp or a sky region, which is reflected in the ``xtype`` field (e.g., ``timestamp`` or ``adql:REGION``).

.. doctest-remote-data::

    >>> eso.query_instrument("midi", help=True)  # doctest: +IGNORE_OUTPUT
    INFO:
    Columns present in the table ist.midi:
        column_name     datatype    xtype         unit
    ------------------- -------- ------------ -----------
         access_estsize     long                 kbyte
             access_url     char
           datalink_url     char
               date_obs     char
                    ...
              exp_start     char      timestamp
                    ...
                 object     char
                    ...      
           release_date     char      timestamp
               s_region     char   adql:REGION
                    ...      
                    utc    float                    s

    Number of records present in the table ist.midi:
    437577
    [astroquery.eso.core]

**Note:** for a deeper description of each column, the following query can be issued
on the ESO `Programmatic Access <https://archive.eso.org/programmatic/#TAP>`_ website (`see here <https://archive.eso.org/tap_obs/sync?REQUEST=doQuery&LANG=ADQL&MAXREC=200&FORMAT=txt&QUERY=select%20column_name,%20description%20from%20TAP_SCHEMA.columns%20where%20table_name%20=%20%27ist.midi%27>`_):

``select column_name, description from TAP_SCHEMA.columns where table_name = 'ist.midi'``

Querying with constraints
-------------------------

Once the available query columns have been inspected (e.g., via ``help=True``), you can construct a constrained query to retrieve relevant datasets. For example, suppose you want to retrieve MIDI observations of the target ``NGC 4151`` that were taken between ``2008-01-01`` and ``2009-05-12``.

The ``column_filters`` dictionary allows you to specify conditions for individual columns, using ADQL-compatible expressions under the hood. In this case, the filters apply to:

- ``object``: the target name, matched as a string (case-insensitive)
- ``exp_start``: the observation start time, stored as a ``char`` column with ``timestamp`` ``xtype``

The ``columns`` argument controls which fields are returned in the results table.

.. doctest-remote-data::
    >>> table = eso.query_instrument(
    ...             instrument="midi",
    ...             column_filters={
    ...                 "object":"NGC4151",
    ...                 "exp_start": "between '2008-01-01' and '2009-05-12'"},
    ...             columns=["object", "date_obs"])
    >>> table
    <Table length=196>
    object         date_obs
    ------- -----------------------
    NGC4151 2008-04-22T02:07:50.154
    NGC4151 2008-04-22T02:08:20.345
    NGC4151 2008-04-22T02:09:47.846
        ...
    NGC4151 2009-05-11T01:42:08.432

.. tip::
   
    - Use only column names returned via ``help=True`` (e.g. ``exp_start``, ``object``, ``prog_id``, ``exptime``, etc.).
    - String filters (like ``object``) are matched case-insensitively.
    - Temporal filters on fields like ``exp_start`` or ``release_date`` can use SQL-style syntax (e.g. ``between 'YYYY-MM-DD' and 'YYYY-MM-DD'``).
    - Column names are case-sensitive in Python, so ensure they match exactly.