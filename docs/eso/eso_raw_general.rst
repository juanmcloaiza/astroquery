
****************************
Query for Raw Data (Generic)
****************************

The `astroquery.eso` module provides several ways to search for data in the ESO Science Archive for raw data. This section focuses on the **generic query interface** for raw data, while in another section we describe **instrument-specific queries** (e.g., using :meth:`~astroquery.eso.EsoClass.query_instrument`).

In some cases, you may want to query the ESO Archive **without targeting a specific instrument**. This is exactly what the :meth:`~astroquery.eso.EsoClass.query_main` method is designed for. It allows access to the **global raw data table**, which combines metadata across all instruments. Internally, this method queries the ``dbo.raw`` table via ESO's `TAP service <https://archive.eso.org/programmatic/#TAP>`_, which you could also access directly using ADQL with a simple statement like:

.. doctest-skip::
   SELECT * FROM dbo.raw

Functionally, :meth:`~astroquery.eso.EsoClass.query_main` works the same way as :meth:`~astroquery.eso.EsoClass.query_instrument`, except you don’t need to specify an instrument table name directly. You can still apply column filters, control the columns returned, and limit result counts.

Identify Available Instruments
==============================

To begin retrieving raw data from the ESO Science Archive, you may first want to know the relevant instrument(s) for your search. Each instrument has its own dedicated query table accessible through the archive’s programmatic `TAP <https://archive.eso.org/programmatic/#TAP>`_ interface.

The list of all supported instruments can be retrieved using the :meth:`~astroquery.eso.EsoClass.list_instruments` method:

.. doctest-remote-data::

    >>> from astroquery.eso import Eso
    >>> eso = Eso()
    >>> eso.list_instruments()
    ['alpaca', 'amber', 'apex', 'crires', 'efosc', 'eris',
    'espresso', 'fiat', 'fors1', 'fors2', 'giraffe', 'gravity',
    'harps', 'hawki', 'isaac', 'kmos', 'matisse', 'midi',
    'muse', 'naco', 'nirps', 'omegacam', 'pionier', 'sinfoni',
    'sofi', 'sphere', 'uves', 'vimos', 'vircam', 'visir',
    'wlgsu', 'xshooter']

This list corresponds to the instruments currently available for programmatic raw data queries in the ESO archive.

**Note:** The list is dynamically generated by querying the archive’s internal TAP service. It can also be reproduced directly by executing the following ADQL query on the `ESO TAP interface <https://archive.eso.org/programmatic/#TAP>`_:

.. doctest-skip::

      SELECT table_name 
      FROM TAP_SCHEMA.tables 
      WHERE schema_name = 'ist' 
      ORDER BY table_name

Once you have identified the instrument of interest, you can proceed with constructing your query and retrieving raw data products.

Inspect Available Query Constraints
===================================

We start by inspecting the available columns that can be queried by ``query_main`` with the ``help=True`` keyword. This will return a list of all columns available in the ``dbo.raw`` table, along with their data types, units, and any additional metadata such as ``xtype`` information.

.. doctest-remote-data::

    >>> eso.query_main(help=True)
    INFO: 
    Columns present in the table dbo.raw:
        column_name     datatype    xtype     unit 
    ------------------- -------- ----------- ------
        access_estsize     long              kbyte
            access_url     char                   
          datalink_url     char                   
              date_obs     char                   
                   dec   double                deg
               dec_pnt   double                deg
                   ...
             tpl_start     char                   

    Number of records present in the table dbo.raw:
    34821254
    [astroquery.eso.core]

Query with Constraints (Specific Instrument)
============================================

Now that we know which of the columns are available for queries, we can, for example, retrieving all-sky images from the ``APICAM`` instrument using the ``LUMINANCE`` filter, on a single night (i.e. 2019-04-26):

.. doctest-remote-data::

    >>> eso.maxrec = -1    # Return all results without truncation
    >>> table = eso.query_main(
    ...                     column_filters={
    ...                         "instrument": "APICAM",
    ...                         "filter_path": "LUMINANCE",
    ...                         "exp_start": "between '2019-04-26' and '2019-04-27'"})
    >>> print(len(table))
    215
    >>> table.colnames
    ['object', 'ra', 'dec', 'dp_id', 'date_obs', 'prog_id',
    'access_estsize', 'access_url', 'datalink_url', ... 'tpl_start']
    >>> table[["object", "ra", "dec", "date_obs", "prog_id"]]
     <Table length=215>
    object      ra          dec              date_obs          prog_id   
                deg          deg                                          
    object   float64      float64             object            object   
    ------- ------------ ------------ ----------------------- ------------
    ALL SKY 145.29212694 -24.53624194 2019-04-26T00:08:49.000 60.A-9008(A)
    ALL SKY 145.92251305 -24.53560305 2019-04-26T00:11:20.000 60.A-9008(A)
    ALL SKY    146.55707 -24.53497111 2019-04-26T00:13:52.000 60.A-9008(A)
    ...
    ALL SKY 143.56345694 -24.53804388 2019-04-26T23:57:59.000 60.A-9008(A)


Query with Constraints (All Instruments)
========================================

Alternatively, if you want to retrieve all available raw data products with the ``LUMINANCE`` filter, on a single night (i.e. 2019-04-26) without specifying the instrument, you can use the ``query_main`` method. 

.. doctest-remote-data::

    >>> table = eso.query_main(
    ...                     column_filters={
    ...                         "filter_path": "LUMINANCE",
    ...                         "exp_start": "between '2019-04-26' and '2019-04-27'"})

Another useful example for ``eso.query_main`` is to query for all raw data for a specific target, such as ``NGC 3627``, across all instruments:

.. doctest-remote-data::

    >>> table = eso.query_main(column_filters={"object": "NGC 3627"})

.. tip::

    Use ``query_main`` when you want to search **across all instruments**, for example to retrieve all observations of a specific source regardless of the instrument used.

    .. doctest-remote-data::

        table = eso.query_main(column_filters={"object": "NGC 3627"})

    Use ``query_instrument`` when you want a more **refined, instrument-specific search**, applying filters that are only available for a particular instrument (e.g. instrument modes, configurations, or ambient conditions).

    .. doctest-remote-data::

        column_filters = {
            "dp_cat": "SCIENCE",           # Science data only
            "ins_opt1_name": "HIGH_SENS",  # High sensitivity mode
            "night_flag": "night",         # Nighttime observations only
            "moon_illu": "< 0",            # No moon (below horizon)
            "lst": "between 0 and 6"       # Local sidereal time early in the night
        }

        table = eso.query_instrument("midi", column_filters=column_filters)

Download Data
=============

To download the data returned by the query, you can use the :meth:`~astroquery.eso.EsoClass.retrieve_data` method. This method takes a list of data product IDs (``dp_id``) and downloads the corresponding files from the ESO archive.

.. doctest-remote-data::
    >>> eso.retrieve_data(table["dp_id"])

The ``data_files`` points to the decompressed dataset filenames that have been locally downloaded. The default location of the decompressed datasets can be adjusted by providing a ``destination`` keyword in the call to :meth:`~astroquery.eso.EsoClass.retrieve_data`.

.. doctest-skip::
    >>> data_files = eso.retrieve_data(table["dp_id"], destination="./eso_data/")